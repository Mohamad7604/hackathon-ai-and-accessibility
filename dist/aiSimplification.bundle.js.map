{"version":3,"file":"aiSimplification.bundle.js","mappings":"AAgLA,IAhLA,MACI,WAAAA,GACIC,KAAKC,OAAS,sCACdD,KAAKE,oBACLF,KAAKG,wBACT,CAEA,sBAAAA,GACqB,IAAIC,kBAAkBC,IAC9BC,SAASC,eAAe,sBACzBP,KAAKE,uBAIJM,QAAQF,SAASG,KAAM,CAC5BC,WAAW,EACXC,SAAS,GAEjB,CAEA,iBAAAT,GACI,MAAMU,EAAiBN,SAASC,eAAe,qBAC3CK,GACAA,EAAeC,SAGnB,MAAMC,EAASR,SAASS,cAAc,UACtCD,EAAOE,GAAK,oBACZF,EAAOG,YAAc,gBACrBH,EAAOI,MAAMC,QAAU,ibAgBvBL,EAAOM,iBAAiB,SAAS,IAAMpB,KAAKqB,oBAC5Cf,SAASG,KAAKa,YAAYR,EAC9B,CAEA,kBAAAS,GACI,MAAMC,EAAUlB,SAASmB,cAAc,YACxBnB,SAASmB,cAAc,SACvBnB,SAASmB,cAAc,YAEtC,GAAID,EACA,OAAOA,EAAQE,UAInB,IAAIC,EAAY,EACZC,EAAc,GAUlB,OATmBtB,SAASuB,iBAAiB,4BAElCC,SAAQC,IACXA,EAAUL,UAAUM,OAASL,IAC7BA,EAAYI,EAAUL,UAAUM,OAChCJ,EAAcG,EAAUL,cAIzBE,CACX,CAEA,qBAAMP,GACF,MAAMO,EAAc5B,KAAKuB,qBACzB,IAAKK,EAED,YADAK,MAAM,sCAIV,MAAMC,EAAmBlC,KAAKmC,mBAE9B,IACI,MAAMC,QAAiBC,MAAM,+CAAgD,CACzEC,OAAQ,OACRC,QAAS,CACL,cAAiB,UAAUvC,KAAKC,SAChC,eAAgB,oBAEpBQ,KAAM+B,KAAKC,UAAU,CACjBC,MAAO,gBACPC,SAAU,CAAC,CACPC,KAAM,OACNC,QAAS,+SAKDjB,MAEZkB,YAAa,GACbC,WAAY,IACZC,KAAM,SAId,IAAKZ,EAASa,GACV,MAAM,IAAIC,MAAM,uBAAuBd,EAASe,UAGpD,MAAMC,QAAahB,EAASiB,OAG5B,GAFAC,QAAQC,IAAI,gBAAiBH,GAEzBA,EAAKI,MACL,MAAM,IAAIN,MAAM,cAAcE,EAAKI,MAAMC,WAG7C,IAAKL,EAAKM,UAAYN,EAAKM,QAAQ,KAAON,EAAKM,QAAQ,GAAGD,QAEtD,MADAH,QAAQE,MAAM,2BAA4BJ,GACpC,IAAIF,MAAM,kCAGpB,MAAMS,EAAiBP,EAAKM,QAAQ,GAAGD,QAAQZ,QAC1Ce,QAAQ,iBAAkB,uBAC1BA,QAAQ,MAAO,QACfC,OAEL,IAAKF,EACD,MAAM,IAAIT,MAAM,2BAGpBlD,KAAK8D,eAAeH,EACxB,CAAE,MAAOH,GACLF,QAAQE,MAAM,yBAA0BA,GACxCvB,MAAM,4BAA4BuB,EAAMC,UAC5C,CAAE,QACEvB,EAAiBrB,QACrB,CACJ,CAEA,gBAAAsB,GACI,MAAM4B,EAASzD,SAASS,cAAc,OAgBtC,OAfAgD,EAAO/C,GAAK,kBACZ+C,EAAO7C,MAAMC,QAAU,qVAYvB4C,EAAO9C,YAAc,sBACrBX,SAASG,KAAKa,YAAYyC,GACnBA,CACX,CAEA,cAAAD,CAAeH,GACX,MAAM/B,EAActB,SAASmB,cAAc,YACzBnB,SAASmB,cAAc,SACvBnB,SAASmB,cAAc,YAEzC,GAAIG,EACAA,EAAYoC,UAAYL,MACrB,CACH,MAAM5B,EAAYzB,SAASS,cAAc,OACzCgB,EAAUiC,UAAYL,EACtBrD,SAASG,KAAKuD,UAAYjC,EAAUiC,SACxC,CACJ","sources":["webpack://readable-browser-extension/./aiSimplification.js"],"sourcesContent":["class TextSimplifier {\r\n    constructor() {\r\n        this.apiKey = 'sk-753ecae759d8455ebd44420ed9707d64';\r\n        this.addSimplifyButton();\r\n        this.observeDocumentChanges();\r\n    }\r\n\r\n    observeDocumentChanges() {\r\n        const observer = new MutationObserver((mutations) => {\r\n            if (!document.getElementById('readable-simplify')) {\r\n                this.addSimplifyButton();\r\n            }\r\n        });\r\n\r\n        observer.observe(document.body, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n    }\r\n\r\n    addSimplifyButton() {\r\n        const existingButton = document.getElementById('readable-simplify');\r\n        if (existingButton) {\r\n            existingButton.remove();\r\n        }\r\n\r\n        const button = document.createElement('button');\r\n        button.id = 'readable-simplify';\r\n        button.textContent = 'Simplify Text';\r\n        button.style.cssText = `\r\n            position: fixed;\r\n            top: 20px;\r\n            right: 20px;\r\n            z-index: 10000;\r\n            padding: 10px 20px;\r\n            background: #3498db;\r\n            color: white;\r\n            border: none;\r\n            border-radius: 4px;\r\n            cursor: pointer;\r\n            font-family: Arial, sans-serif;\r\n            font-size: 14px;\r\n            box-shadow: 0 2px 5px rgba(0,0,0,0.2);\r\n        `;\r\n        \r\n        button.addEventListener('click', () => this.simplifyContent());\r\n        document.body.appendChild(button);\r\n    }\r\n\r\n    extractMainContent() {\r\n        const article = document.querySelector('article') || \r\n                       document.querySelector('main') || \r\n                       document.querySelector('.content');\r\n        \r\n        if (article) {\r\n            return article.innerText;\r\n        }\r\n\r\n        // Fallback to finding the largest text container\r\n        let maxLength = 0;\r\n        let mainContent = '';\r\n        const containers = document.querySelectorAll('p, article, section, div');\r\n        \r\n        containers.forEach(container => {\r\n            if (container.innerText.length > maxLength) {\r\n                maxLength = container.innerText.length;\r\n                mainContent = container.innerText;\r\n            }\r\n        });\r\n\r\n        return mainContent;\r\n    }\r\n\r\n    async simplifyContent() {\r\n        const mainContent = this.extractMainContent();\r\n        if (!mainContent) {\r\n            alert('No main content found to simplify.');\r\n            return;\r\n        }\r\n\r\n        const loadingIndicator = this.showLoadingState();\r\n\r\n        try {\r\n            const response = await fetch('https://api.deepseek.com/v1/chat/completions', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authorization': `Bearer ${this.apiKey}`,\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    model: \"deepseek-chat\",\r\n                    messages: [{\r\n                        role: \"user\",\r\n                        content: `Simplify this text for dyslexia by:\r\n                        1. Breaking down complex sentences\r\n                        2. Using simpler words\r\n                        3. Adding bold formatting to key terms\r\n                        4. Maintaining the original meaning\r\n                        Text: ${mainContent}`\r\n                    }],\r\n                    temperature: 0.3,\r\n                    max_tokens: 4000,\r\n                    stop: null\r\n                })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            console.log('API Response:', data);\r\n\r\n            if (data.error) {\r\n                throw new Error(`API Error: ${data.error.message}`);\r\n            }\r\n\r\n            if (!data.choices || !data.choices[0] || !data.choices[0].message) {\r\n                console.error('Unexpected API response:', data);\r\n                throw new Error('Invalid API response structure');\r\n            }\r\n\r\n            const simplifiedHtml = data.choices[0].message.content\r\n                .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\r\n                .replace(/\\n/g, '<br>')\r\n                .trim();\r\n\r\n            if (!simplifiedHtml) {\r\n                throw new Error('Empty response from API');\r\n            }\r\n\r\n            this.replaceContent(simplifiedHtml);\r\n        } catch (error) {\r\n            console.error('Simplification failed:', error);\r\n            alert(`Failed to simplify text: ${error.message}`);\r\n        } finally {\r\n            loadingIndicator.remove();\r\n        }\r\n    }\r\n\r\n    showLoadingState() {\r\n        const loader = document.createElement('div');\r\n        loader.id = 'readable-loader';\r\n        loader.style.cssText = `\r\n            position: fixed;\r\n            top: 50%;\r\n            left: 50%;\r\n            transform: translate(-50%, -50%);\r\n            background: rgba(0,0,0,0.8);\r\n            color: white;\r\n            padding: 20px;\r\n            border-radius: 5px;\r\n            z-index: 10001;\r\n            font-family: Arial, sans-serif;\r\n        `;\r\n        loader.textContent = 'Simplifying text...';\r\n        document.body.appendChild(loader);\r\n        return loader;\r\n    }\r\n\r\n    replaceContent(simplifiedHtml) {\r\n        const mainContent = document.querySelector('article') || \r\n                          document.querySelector('main') || \r\n                          document.querySelector('.content');\r\n        \r\n        if (mainContent) {\r\n            mainContent.innerHTML = simplifiedHtml;\r\n        } else {\r\n            const container = document.createElement('div');\r\n            container.innerHTML = simplifiedHtml;\r\n            document.body.innerHTML = container.innerHTML;\r\n        }\r\n    }\r\n}\r\n\r\n// Initialize the TextSimplifier\r\nnew TextSimplifier();"],"names":["constructor","this","apiKey","addSimplifyButton","observeDocumentChanges","MutationObserver","mutations","document","getElementById","observe","body","childList","subtree","existingButton","remove","button","createElement","id","textContent","style","cssText","addEventListener","simplifyContent","appendChild","extractMainContent","article","querySelector","innerText","maxLength","mainContent","querySelectorAll","forEach","container","length","alert","loadingIndicator","showLoadingState","response","fetch","method","headers","JSON","stringify","model","messages","role","content","temperature","max_tokens","stop","ok","Error","status","data","json","console","log","error","message","choices","simplifiedHtml","replace","trim","replaceContent","loader","innerHTML"],"sourceRoot":""}