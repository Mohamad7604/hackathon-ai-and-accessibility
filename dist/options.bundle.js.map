{"version":3,"file":"options.bundle.js","mappings":"AAKAA,SAASC,iBAAiB,oBAAoB,KAC5C,MAAMC,EAAOF,SAASG,eAAe,eAC/BC,EAAYJ,SAASG,eAAe,cAG1C,SAASE,EAAkBC,GACzBF,EAAUG,UAAY,GACtB,IAAK,MAAOC,EAAMC,KAAaC,OAAOC,QAAQL,GAAU,CACtD,MAAMM,EAAKZ,SAASa,cAAc,MAC5BC,EAAQd,SAASa,cAAc,QACrCC,EAAMC,YAAcP,EACpBI,EAAGI,YAAYF,GAGf,MAAMG,EAAWjB,SAASa,cAAc,UACxCI,EAASF,YAAc,QACvBE,EAAShB,iBAAiB,SAAS,KAEjCiB,OAAOC,KAAKC,MACV,CAAEC,QAAQ,EAAMC,eAAe,IAC9BH,IACMA,EAAK,IACVD,OAAOK,QAAQC,KAAKC,IAAIhB,GAAU,KAChCS,OAAOC,KAAKO,YACVP,EAAK,GAAGQ,GACR,CAAEC,KAAM,eAAgBnB,aACxB,kBAQVG,EAAGI,YAAYC,GAGf,MAAMY,EAAS7B,SAASa,cAAc,UACtCgB,EAAOd,YAAc,SACrBc,EAAOC,MAAMC,WAAa,MAC1BF,EAAOC,MAAME,WAAa,UAC1BH,EAAO5B,iBAAiB,SAAS,KAC/BiB,OAAOK,QAAQC,KAAKS,IAAI,CAAE3B,QAAS,CAAC,IAAM4B,IACxC,MAAMC,EAAaD,EAAK5B,eACjB6B,EAAW3B,GAClBU,OAAOK,QAAQC,KAAKC,IAAI,CAAEnB,QAAS6B,IAAc,KAC/C9B,EAAkB8B,YAIxBvB,EAAGI,YAAYa,GAEfzB,EAAUY,YAAYJ,EACxB,CAEA,GAAoC,IAAhCF,OAAO0B,KAAK9B,GAAS+B,OAAc,CACrC,MAAMC,EAAWtC,SAASa,cAAc,MACxCyB,EAASvB,YAAc,wBACvBuB,EAASR,MAAMS,UAAY,SAC3BD,EAASR,MAAMU,MAAQ,UACvBpC,EAAUY,YAAYsB,EACxB,CACF,CAGApB,OAAOK,QAAQC,KAAKS,IAAI,CAAE3B,QAAS,CAAC,IAAM4B,IACxC7B,EAAkB6B,EAAK5B,YAIzBJ,EAAKD,iBAAiB,UAAWwC,IAC/BA,EAAEC,iBACF,MAAMlC,EAAOR,SACVG,eAAe,eACfwC,MAAMC,OACT,IAAKpC,EAAM,OAEX,MAAMqC,EAAO7C,SAASG,eAAe,QAAQwC,MACvCG,EAAK9C,SAASG,eAAe,YAAYwC,MACzCI,EAAY/C,SAASG,eAAe,cAAcwC,MAWlDlC,EAAW,CACfuC,WAAYH,EACZI,cAZoBC,WACpBlD,SAASG,eAAe,kBAAkBwC,OAY1CQ,WAViBD,WACjBlD,SAASG,eAAe,eAAewC,OAUvCS,MARYpD,SAASG,eAAe,gBACnCwC,MASDU,QAASP,EACTC,UAAWA,GAIb7B,OAAOK,QAAQC,KAAKS,IAAI,CAAE3B,QAAS,CAAC,IAAM4B,IACxC,MAAMC,EAAaD,EAAK5B,QACxB6B,EAAW3B,GAAQC,EACnBS,OAAOK,QAAQC,KAAKC,IAAI,CAAEnB,QAAS6B,IAAc,KAC/C9B,EAAkB8B,GAClBjC,EAAKoD","sources":["webpack://readable-browser-extension/./options.js"],"sourcesContent":["// ──────────────────────────────────────────────────────────────────────────\r\n//   options.js\r\n//   Handles saving/loading/deleting user presets via chrome.storage.sync\r\n// ──────────────────────────────────────────────────────────────────────────\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  const form = document.getElementById(\"preset-form\");\r\n  const presetsUl = document.getElementById(\"presets-ul\");\r\n\r\n  // Utility: Render the current presets list\r\n  function renderPresetsList(presets) {\r\n    presetsUl.innerHTML = \"\"; // clear\r\n    for (const [name, settings] of Object.entries(presets)) {\r\n      const li = document.createElement(\"li\");\r\n      const label = document.createElement(\"span\");\r\n      label.textContent = name;\r\n      li.appendChild(label);\r\n\r\n      // “Apply” button\r\n      const applyBtn = document.createElement(\"button\");\r\n      applyBtn.textContent = \"Apply\";\r\n      applyBtn.addEventListener(\"click\", () => {\r\n        // Send to active tab to update styles\r\n        chrome.tabs.query(\r\n          { active: true, currentWindow: true },\r\n          (tabs) => {\r\n            if (!tabs[0]) return;\r\n            chrome.storage.sync.set(settings, () => {\r\n              chrome.tabs.sendMessage(\r\n                tabs[0].id,\r\n                { type: \"updateStyles\", settings },\r\n                () => {\r\n                  /* nothing further */\r\n                }\r\n              );\r\n            });\r\n          }\r\n        );\r\n      });\r\n      li.appendChild(applyBtn);\r\n\r\n      // “Delete” button\r\n      const delBtn = document.createElement(\"button\");\r\n      delBtn.textContent = \"Delete\";\r\n      delBtn.style.marginLeft = \"8px\";\r\n      delBtn.style.background = \"#ff3333\";\r\n      delBtn.addEventListener(\"click\", () => {\r\n        chrome.storage.sync.get({ presets: {} }, (data) => {\r\n          const allPresets = data.presets;\r\n          delete allPresets[name];\r\n          chrome.storage.sync.set({ presets: allPresets }, () => {\r\n            renderPresetsList(allPresets);\r\n          });\r\n        });\r\n      });\r\n      li.appendChild(delBtn);\r\n\r\n      presetsUl.appendChild(li);\r\n    }\r\n\r\n    if (Object.keys(presets).length === 0) {\r\n      const emptyMsg = document.createElement(\"li\");\r\n      emptyMsg.textContent = \"No presets saved yet.\";\r\n      emptyMsg.style.fontStyle = \"italic\";\r\n      emptyMsg.style.color = \"#666666\";\r\n      presetsUl.appendChild(emptyMsg);\r\n    }\r\n  }\r\n\r\n  // On load: fetch and display existing presets\r\n  chrome.storage.sync.get({ presets: {} }, (data) => {\r\n    renderPresetsList(data.presets);\r\n  });\r\n\r\n  // On form submit: save a new preset\r\n  form.addEventListener(\"submit\", (e) => {\r\n    e.preventDefault();\r\n    const name = document\r\n      .getElementById(\"preset-name\")\r\n      .value.trim();\r\n    if (!name) return;\r\n\r\n    const font = document.getElementById(\"font\").value;\r\n    const bg = document.getElementById(\"bg-color\").value;\r\n    const textColor = document.getElementById(\"text-color\").value;\r\n    const letterSpacing = parseFloat(\r\n      document.getElementById(\"letter-spacing\").value\r\n    );\r\n    const lineHeight = parseFloat(\r\n      document.getElementById(\"line-height\").value\r\n    );\r\n    const theme = document.getElementById(\"theme-select\")\r\n      .value;\r\n\r\n    // Build settings object\r\n    const settings = {\r\n      fontFamily: font,\r\n      letterSpacing: letterSpacing,\r\n      lineHeight: lineHeight,\r\n      theme: theme,\r\n      // If you want to store bg/text-color as well, add them to applyStyles\r\n      bgColor: bg,\r\n      textColor: textColor,\r\n    };\r\n\r\n    // Fetch existing presets, add/update\r\n    chrome.storage.sync.get({ presets: {} }, (data) => {\r\n      const allPresets = data.presets;\r\n      allPresets[name] = settings; // override if same name\r\n      chrome.storage.sync.set({ presets: allPresets }, () => {\r\n        renderPresetsList(allPresets);\r\n        form.reset();\r\n      });\r\n    });\r\n  });\r\n});\r\n"],"names":["document","addEventListener","form","getElementById","presetsUl","renderPresetsList","presets","innerHTML","name","settings","Object","entries","li","createElement","label","textContent","appendChild","applyBtn","chrome","tabs","query","active","currentWindow","storage","sync","set","sendMessage","id","type","delBtn","style","marginLeft","background","get","data","allPresets","keys","length","emptyMsg","fontStyle","color","e","preventDefault","value","trim","font","bg","textColor","fontFamily","letterSpacing","parseFloat","lineHeight","theme","bgColor","reset"],"sourceRoot":""}