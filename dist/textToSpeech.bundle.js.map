{"version":3,"file":"textToSpeech.bundle.js","mappings":"AA8HA,IA9HA,MACI,WAAAA,GACIC,KAAKC,UAAY,KACjBD,KAAKE,WAAY,EACjBF,KAAKG,YAAc,KACnBH,KAAKI,oBACT,CAEA,kBAAAA,GACI,MAAMC,EAAWC,SAASC,cAAc,OACxCF,EAASG,UAAY,oqBAoBrBF,SAASG,KAAKC,YAAYL,GAE1BC,SAASK,eAAe,YAAYC,iBAAiB,SAAS,IAAMZ,KAAKa,iBACzEP,SAASK,eAAe,YAAYC,iBAAiB,UAAWE,GAAMd,KAAKe,QAAQD,EAAEE,OAAOC,QAChG,CAEA,YAAAJ,GACQb,KAAKE,WACLgB,gBAAgBC,SAChBnB,KAAKE,WAAY,EACjBI,SAASK,eAAe,YAAYS,YAAc,OAClDpB,KAAKqB,mBAELrB,KAAKsB,cAEb,CAEA,YAAAA,GACI,MAAMC,EAAOjB,SAASG,KAAKe,UAC3BxB,KAAKC,UAAY,IAAIwB,yBAAyBF,GAC9CvB,KAAKC,UAAUyB,KAAOC,WAAWrB,SAASK,eAAe,YAAYM,OAErEjB,KAAKC,UAAU2B,WAAcC,IACN,SAAfA,EAAMC,MACN9B,KAAK+B,cAAcF,IAI3B7B,KAAKC,UAAU+B,MAAQ,KACnBhC,KAAKE,WAAY,EACjBI,SAASK,eAAe,YAAYS,YAAc,OAClDpB,KAAKqB,mBAGTH,gBAAgBe,MAAMjC,KAAKC,WAC3BD,KAAKE,WAAY,EACjBI,SAASK,eAAe,YAAYS,YAAc,OACtD,CAEA,OAAAL,CAAQW,GACA1B,KAAKC,YACLD,KAAKC,UAAUyB,KAAOC,WAAWD,GAEzC,CAEA,aAAAK,CAAcF,GACV7B,KAAKqB,kBAEL,MAAMa,EAAQ5B,SAASG,KAAKe,UAAUW,MAAM,KAC5C,IAAIC,EAAY,EACZC,EAAY,EAEhB,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAMK,OAAQD,IAAK,CACnC,GAAIF,EAAYF,EAAMI,GAAGC,QAAUV,EAAMW,UAAW,CAChDH,EAAYC,EACZ,KACJ,CACAF,GAAaF,EAAMI,GAAGC,OAAS,CACnC,CAEA,MAAME,EAAQnC,SAASoC,cACjBC,EAASrC,SAASsC,iBACpBtC,SAASG,KACToC,WAAWC,UACX,MACA,GAGJ,IAAI3C,EAAcwC,EAAOI,WACzB,KAAO5C,GAAa,CAChB,GAAIA,EAAYiB,YAAY4B,SAASd,EAAMG,IAAa,CACpD,MAAMY,EAAQ9C,EAAYiB,YAAY8B,QAAQhB,EAAMG,IACpDI,EAAMU,SAAShD,EAAa8C,GAC5BR,EAAMW,OAAOjD,EAAa8C,EAAQf,EAAMG,GAAWE,QAEnD,MAAMc,EAAY/C,SAASC,cAAc,QACzC8C,EAAUC,MAAMC,gBAAkB,SAClCF,EAAUG,UAAY,gBAEtBf,EAAMgB,iBAAiBJ,GACvB,KACJ,CACAlD,EAAcwC,EAAOI,UACzB,CACJ,CAEA,eAAA1B,GACuBf,SAASoD,iBAAiB,kBAClCC,SAAQC,IACf,MAAMC,EAASD,EAAEE,WACjBD,EAAOE,aAAazD,SAAS0D,eAAeJ,EAAExC,aAAcwC,GAC5DC,EAAOI,cAEf","sources":["webpack://readable-browser-extension/./textToSpeech.js"],"sourcesContent":["class TextToSpeech {\r\n    constructor() {\r\n        this.utterance = null;\r\n        this.isPlaying = false;\r\n        this.currentNode = null;\r\n        this.initializeControls();\r\n    }\r\n\r\n    initializeControls() {\r\n        const controls = document.createElement('div');\r\n        controls.innerHTML = `\r\n            <div id=\"tts-controls\" style=\"\r\n                position: fixed;\r\n                bottom: 20px;\r\n                right: 20px;\r\n                background: white;\r\n                padding: 10px;\r\n                border-radius: 5px;\r\n                box-shadow: 0 2px 5px rgba(0,0,0,0.2);\r\n                z-index: 10000;\r\n            \">\r\n                <button id=\"tts-play\">Play</button>\r\n                <select id=\"tts-rate\">\r\n                    <option value=\"0.5\">0.5x</option>\r\n                    <option value=\"0.8\" selected>0.8x</option>\r\n                    <option value=\"1.0\">1.0x</option>\r\n                </select>\r\n            </div>\r\n        `;\r\n        \r\n        document.body.appendChild(controls);\r\n        \r\n        document.getElementById('tts-play').addEventListener('click', () => this.toggleSpeech());\r\n        document.getElementById('tts-rate').addEventListener('change', (e) => this.setRate(e.target.value));\r\n    }\r\n\r\n    toggleSpeech() {\r\n        if (this.isPlaying) {\r\n            speechSynthesis.cancel();\r\n            this.isPlaying = false;\r\n            document.getElementById('tts-play').textContent = 'Play';\r\n            this.removeHighlight();\r\n        } else {\r\n            this.startReading();\r\n        }\r\n    }\r\n\r\n    startReading() {\r\n        const text = document.body.innerText;\r\n        this.utterance = new SpeechSynthesisUtterance(text);\r\n        this.utterance.rate = parseFloat(document.getElementById('tts-rate').value);\r\n        \r\n        this.utterance.onboundary = (event) => {\r\n            if (event.name === 'word') {\r\n                this.highlightWord(event);\r\n            }\r\n        };\r\n\r\n        this.utterance.onend = () => {\r\n            this.isPlaying = false;\r\n            document.getElementById('tts-play').textContent = 'Play';\r\n            this.removeHighlight();\r\n        };\r\n\r\n        speechSynthesis.speak(this.utterance);\r\n        this.isPlaying = true;\r\n        document.getElementById('tts-play').textContent = 'Pause';\r\n    }\r\n\r\n    setRate(rate) {\r\n        if (this.utterance) {\r\n            this.utterance.rate = parseFloat(rate);\r\n        }\r\n    }\r\n\r\n    highlightWord(event) {\r\n        this.removeHighlight();\r\n        \r\n        const words = document.body.innerText.split(' ');\r\n        let charCount = 0;\r\n        let wordIndex = 0;\r\n\r\n        for (let i = 0; i < words.length; i++) {\r\n            if (charCount + words[i].length >= event.charIndex) {\r\n                wordIndex = i;\r\n                break;\r\n            }\r\n            charCount += words[i].length + 1;\r\n        }\r\n\r\n        const range = document.createRange();\r\n        const walker = document.createTreeWalker(\r\n            document.body,\r\n            NodeFilter.SHOW_TEXT,\r\n            null,\r\n            false\r\n        );\r\n\r\n        let currentNode = walker.nextNode();\r\n        while (currentNode) {\r\n            if (currentNode.textContent.includes(words[wordIndex])) {\r\n                const start = currentNode.textContent.indexOf(words[wordIndex]);\r\n                range.setStart(currentNode, start);\r\n                range.setEnd(currentNode, start + words[wordIndex].length);\r\n                \r\n                const highlight = document.createElement('span');\r\n                highlight.style.backgroundColor = 'yellow';\r\n                highlight.className = 'tts-highlight';\r\n                \r\n                range.surroundContents(highlight);\r\n                break;\r\n            }\r\n            currentNode = walker.nextNode();\r\n        }\r\n    }\r\n\r\n    removeHighlight() {\r\n        const highlights = document.querySelectorAll('.tts-highlight');\r\n        highlights.forEach(h => {\r\n            const parent = h.parentNode;\r\n            parent.replaceChild(document.createTextNode(h.textContent), h);\r\n            parent.normalize();\r\n        });\r\n    }\r\n}\r\n\r\nnew TextToSpeech();"],"names":["constructor","this","utterance","isPlaying","currentNode","initializeControls","controls","document","createElement","innerHTML","body","appendChild","getElementById","addEventListener","toggleSpeech","e","setRate","target","value","speechSynthesis","cancel","textContent","removeHighlight","startReading","text","innerText","SpeechSynthesisUtterance","rate","parseFloat","onboundary","event","name","highlightWord","onend","speak","words","split","charCount","wordIndex","i","length","charIndex","range","createRange","walker","createTreeWalker","NodeFilter","SHOW_TEXT","nextNode","includes","start","indexOf","setStart","setEnd","highlight","style","backgroundColor","className","surroundContents","querySelectorAll","forEach","h","parent","parentNode","replaceChild","createTextNode","normalize"],"sourceRoot":""}