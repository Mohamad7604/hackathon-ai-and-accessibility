{"version":3,"file":"vocabularyHelper.bundle.js","mappings":"AAqFA,IAnFA,MACI,WAAAA,GACIC,KAAKC,OAAS,qDACdD,KAAKE,oBACLF,KAAKG,kBACT,CAEA,iBAAAD,GACI,MAAME,EAAUC,SAASC,cAAc,OACvCF,EAAQG,GAAK,gBACbH,EAAQI,MAAMC,QAAU,oRAUxBJ,SAASK,KAAKC,YAAYP,EAC9B,CAEA,gBAAAD,GACIE,SAASK,KAAKE,iBAAiB,aAAaC,MAAOC,IAC/C,GAAIA,EAAEC,OAAOC,QAAQ,wCAAyC,CACxCC,OAAOC,eAAzB,MACMC,EAAQd,SAASe,cAEvB,GAAIN,EAAEC,OAAOM,WAAY,CACrBF,EAAMG,SAASR,EAAEC,OAAOM,WAAY,GACpCF,EAAMI,OAAOT,EAAEC,OAAOM,WAAYP,EAAEC,OAAOM,WAAWG,QAEtD,MAAMC,EAAON,EAAMO,WAAWC,OAC1BF,SACMzB,KAAK4B,eAAeH,EAAMX,EAAEe,QAASf,EAAEgB,QAErD,CACJ,IAER,CAEA,oBAAMF,CAAeH,EAAMM,EAAGC,GAC1B,IACI,MAAMC,QAAiBC,MAAM,2CAA2CC,mBAAmBV,KAAS,CAChGW,OAAQ,MACRC,QAAS,CACL,iBAAkBrC,KAAKC,OACvB,kBAAmB,+BAI3B,IAAKgC,EAASK,GACV,MAAM,IAAIC,MAAM,8BAGpB,MAAMC,QAAaP,EAASQ,OAE5B,GAAID,EAAKE,SAAWF,EAAKE,QAAQlB,OAAS,EAAG,CACzC,MAAMmB,EAAaH,EAAKE,QAAQ,GAAGC,WAC7BC,EAAWJ,EAAKE,QAAQ,GAAGE,UAAY,GAEvCxC,EAAUC,SAASwC,eAAe,iBACxCzC,EAAQ0C,UAAY,iCACNrB,uCACRkB,8BACAC,EAASpB,OAAS,EAAI,oBAAoBoB,EAASG,MAAM,EAAG,GAAGC,KAAK,gBAAkB,uBAG5F5C,EAAQI,MAAMyC,KAAO,GAAGlB,EAAI,OAC5B3B,EAAQI,MAAM0C,IAAM,GAAGlB,EAAI,OAC3B5B,EAAQI,MAAM2C,QAAU,QAExBC,YAAW,KACPhD,EAAQI,MAAM2C,QAAU,SACzB,IACP,CACJ,CAAE,MAAOE,GACLC,QAAQD,MAAM,8BAA+BA,EACjD,CACJ","sources":["webpack://readable-browser-extension/./vocabularyHelper.js"],"sourcesContent":["// This file implements the vocabulary helper tooltip functionality.\r\n\r\nclass VocabularyHelper {\r\n    constructor() {\r\n        this.apiKey = '49271852f8msh0708f6bec15a253p1d8d3fjsnc4272774025e';\r\n        this.initializeTooltip();\r\n        this.addWordListeners();\r\n    }\r\n\r\n    initializeTooltip() {\r\n        const tooltip = document.createElement('div');\r\n        tooltip.id = 'vocab-tooltip';\r\n        tooltip.style.cssText = `\r\n            position: fixed;\r\n            display: none;\r\n            background: white;\r\n            padding: 10px;\r\n            border-radius: 5px;\r\n            box-shadow: 0 2px 5px rgba(0,0,0,0.2);\r\n            max-width: 200px;\r\n            z-index: 10000;\r\n        `;\r\n        document.body.appendChild(tooltip);\r\n    }\r\n\r\n    addWordListeners() {\r\n        document.body.addEventListener('mouseover', async (e) => {\r\n            if (e.target.matches('p, h1, h2, h3, h4, h5, h6, span, div')) {\r\n                const selection = window.getSelection();\r\n                const range = document.createRange();\r\n                \r\n                if (e.target.firstChild) {\r\n                    range.setStart(e.target.firstChild, 0);\r\n                    range.setEnd(e.target.firstChild, e.target.firstChild.length);\r\n                    \r\n                    const word = range.toString().trim();\r\n                    if (word) {\r\n                        await this.showDefinition(word, e.clientX, e.clientY);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    async showDefinition(word, x, y) {\r\n        try {\r\n            const response = await fetch(`https://wordsapiv1.p.rapidapi.com/words/${encodeURIComponent(word)}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'X-RapidAPI-Key': this.apiKey,\r\n                    'X-RapidAPI-Host': 'wordsapiv1.p.rapidapi.com'\r\n                }\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Failed to fetch definition');\r\n            }\r\n\r\n            const data = await response.json();\r\n            \r\n            if (data.results && data.results.length > 0) {\r\n                const definition = data.results[0].definition;\r\n                const synonyms = data.results[0].synonyms || [];\r\n                \r\n                const tooltip = document.getElementById('vocab-tooltip');\r\n                tooltip.innerHTML = `\r\n                    <strong>${word}</strong><br>\r\n                    ${definition}<br>\r\n                    ${synonyms.length > 0 ? `<small>Synonyms: ${synonyms.slice(0, 3).join(', ')}</small>` : ''}\r\n                `;\r\n                \r\n                tooltip.style.left = `${x + 10}px`;\r\n                tooltip.style.top = `${y + 10}px`;\r\n                tooltip.style.display = 'block';\r\n\r\n                setTimeout(() => {\r\n                    tooltip.style.display = 'none';\r\n                }, 3000);\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to fetch definition:', error);\r\n        }\r\n    }\r\n}\r\n\r\nnew VocabularyHelper();"],"names":["constructor","this","apiKey","initializeTooltip","addWordListeners","tooltip","document","createElement","id","style","cssText","body","appendChild","addEventListener","async","e","target","matches","window","getSelection","range","createRange","firstChild","setStart","setEnd","length","word","toString","trim","showDefinition","clientX","clientY","x","y","response","fetch","encodeURIComponent","method","headers","ok","Error","data","json","results","definition","synonyms","getElementById","innerHTML","slice","join","left","top","display","setTimeout","error","console"],"sourceRoot":""}